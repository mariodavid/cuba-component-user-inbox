
buildscript {
    ext.cubaVersion = '6.9.2'
    repositories {
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }

        maven {
            url  "https://dl.bintray.com/balvi/cuba-components"
        }
        maven {
            url  "https://dl.bintray.com/mariodavid/cuba-components"
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"

        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0"

        classpath 'net.saliman:gradle-cobertura-plugin:2.5.0'
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2"
    }
}


apply plugin: "com.github.kt3k.coveralls"

def globalModule = project(':user-inbox-global')
def coreModule = project(':user-inbox-core')
def guiModule = project(':user-inbox-gui')
def webModule = project(':user-inbox-web')

def servletApi = 'javax.servlet:javax.servlet-api:3.1.0'


apply(plugin: 'idea')
apply(plugin: 'cuba')


def bintrayRepositoryUrl = "https://api.bintray.com/maven/mariodavid/cuba-components/cuba-component-user-inbox/;publish=1"


cuba {
    artifact {
        group = 'de.diedavids.cuba.userinbox'
        version = '0.4.0'
        isSnapshot = false
    }
    tomcat {
        dir = "$project.rootDir/deploy/tomcat"
    }
    ide {
        vcs = 'Git'
    }
}


subprojects {
    apply plugin: 'com.jfrog.bintray'

    bintray {
        user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('UPLOAD_REPOSITORY_USERNAME')
        key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('UPLOAD_REPOSITORY_PASSWORD')

        configurations = ['archives']

        publish = true

        override = false

        // metadata
        pkg {
            repo = 'cuba-components'
            name = 'cuba-component-user-inbox'
            desc = 'CUBA component that gives users a mailbox for user2user and system2user messages'
            userOrg = 'mariodavid'

            websiteUrl = 'https://github.com/mariodavid/cuba-component-user-inbox'
            issueTrackerUrl = 'https://github.com/mariodavid/cuba-component-user-inbox/issues'
            vcsUrl = 'https://github.com/mariodavid/cuba-component-user-inbox.git'

            licenses = ["Apache-2.0"]

            labels = ['user-inbox', 'user-messaging', 'cuba-patform', 'cuba-component']
            githubRepo = 'mariodavid/cuba-component-user-inbox'
            githubReleaseNotesFile = 'CHANGELOG.md'

            version {
                name = "${cuba.artifact.version}"
                desc = ''
                released  = new Date()
                vcsTag = "${cuba.artifact.version}"
            }
        }
    }
}


dependencies {
    appComponent("com.haulmont.cuba:cuba-global:$cubaVersion")
    appComponent("de.diedavids.cuba.entitysoftreference:entity-soft-reference-global:0.3.0")
    appComponent("de.balvi.cuba.declarativecontrollers:declarativecontrollers-global:0.6.0")

}

def hsql = 'org.hsqldb:hsqldb:2.2.9'


allprojects {
    apply plugin: 'net.saliman.cobertura'
}


def files = subprojects
        .findAll{ !it.name.toLowerCase().contains('theme') }
        .collect { new File(it.projectDir, '/build/cobertura/cobertura.ser')}
def sourceDirs = subprojects
        .findAll{ !it.name.toLowerCase().contains('theme') }
        .collect { new File(it.projectDir, '/src')}

cobertura {
    coverageFormats = ['html', 'xml']
    coverageMergeDatafiles = files
    coverageCheckTotalBranchRate = 0
    coverageCheckTotalLineRate = 0
    coverageCheckHaltOnFailure = true
    coverageSourceDirs = sourceDirs
//    coverageCheckLineRate = 1
    coverageCheckRegexes = [[regex: '.*\\$.*', branchRate: 0, lineRate: 0]]

}


test.dependsOn(subprojects.collect{ ":${it.name}:test"} )
test.finalizedBy(project.tasks.cobertura)
test.finalizedBy(project.tasks.coberturaCheck)




configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'maven')
    apply(plugin: 'idea')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('junit:junit:4.12')


        testCompile('org.spockframework:spock-core:1.0-groovy-2.4')
        testCompile('org.springframework:spring-test:4.3.1.RELEASE')
        testRuntime "cglib:cglib-nodep:3.2.4"
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }
}

configure([globalModule, coreModule, guiModule, webModule]) {
    apply(plugin: 'groovy')

    apply plugin: 'net.saliman.cobertura'
    apply plugin: 'codenarc'

    codenarc {
        toolVersion = "0.24"
        ignoreFailures = false
        reportFormat = 'html'
        reportsDir = new File("./build/reports/codenarc")
    }

    codenarcMain {
        configFile = rootProject.file("config/codenarc/rulesMain.groovy")
    }
    codenarcTest {
        configFile = rootProject.file("config/codenarc/rulesTests.groovy")
    }


    cobertura {
        coverageFormats = ['html', 'xml']
        coverageIgnoreTrivial = true
        coverageIgnores = ['org.slf4j.Logger.*']
        coverageReportDir = new File("$buildDir/reports/cobertura")

        coverageExcludes = [
                '.*Generator',
                '.*Enum',
                '.*Hilfe.*' // Hilfe wird vorerst deaktiviert, da die Hilfe noch einem gro√üen Refactoring unterliegt und dies bisher nur ein Proof of Concept ist
        ]
    }

    test.finalizedBy(project.tasks.cobertura)
    test.finalizedBy(project.tasks.coberturaCheck)
    sourceSets {
        main { groovy { srcDirs = ["src"] } }
        test { groovy { srcDirs = ["test"] } }
    }
}

configure(globalModule) {
    task enhance(type: CubaEnhancing)

    jar {
        manifest {
            attributes('App-Component-Id': cuba.artifact.group)
            attributes('App-Component-Version': cuba.artifact.version + (cuba.artifact.isSnapshot ? '-SNAPSHOT' : ''))
        }
    }

    
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(hsql)
        testRuntime(hsql)

    }

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, '/conf/user-inbox-core')
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'user-inbox-core'
        appJars('user-inbox-global', 'user-inbox-core')
    }

    task createDb(dependsOn: assembleDbScripts, description: 'Creates local database', type: CubaDbCreation) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'ddcui-create-test'
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assembleDbScripts, description: 'Updates local database', type: CubaDbUpdate) {
        dbms = 'hsql'
        host = 'localhost'
        dbName = 'ddcui-create-test'
        dbUser = 'sa'
        dbPassword = ''
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)

    }

    task deployConf(type: Copy) {
        from file('src')
        include "de/diedavids/cuba/userinbox/**"
        into "$cuba.tomcat.dir/conf/user-inbox"
    }
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        provided(servletApi)
        compile(guiModule)

    }
    
    task webArchive(type: Zip) {
        from file("$buildDir/web")
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "de/diedavids/cuba/userinbox/**"
        into "$cuba.tomcat.dir/conf/user-inbox"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = 'user-inbox'
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') {
        doLast {
            def dir = new File(cuba.tomcat.dir, '/conf/user-inbox')
            if (dir.isDirectory()) {
                ant.delete(includeemptydirs: true) {
                    fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
                }
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'user-inbox'
        appJars('user-inbox-global', 'user-inbox-gui', 'user-inbox-web')
    }
}





task undeploy(type: Delete, dependsOn: ':user-inbox-web:cleanConf') {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/user-inbox-core")
    delete("$cuba.tomcat.dir/webapps/user-inbox")
}

task restart(dependsOn: ['stop', ':user-inbox-core:deploy', ':user-inbox-web:deploy'], description: 'Redeploys applications and restarts local Tomcat') {
    doLast {
        ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
            not {
                socket(server: 'localhost', port: '8787')
            }
        }
        start.execute()
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.3.1'
}

apply from: 'extra.gradle'



clean {
    delete = ['build/libs', 'build/tmp']
}